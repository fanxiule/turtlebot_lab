#!/usr/bin/env python

import sys
import rospy
import tf

from curves import CurvePublisher

from geometry_msgs.msg import Twist
from geometry_msgs.msg import PoseWithCovarianceStamped
from geometry_msgs.msg import PoseStamped
from gazebo_msgs.msg import ModelStates
from nav_msgs.msg import OccupancyGrid

x = 0.0
y = 0.0
yaw = 0.0

# def callback(msg):
#     # This function is called when a new position message is received
#     x = msg.pose.pose.position.x
#     y = msg.pose.pose.position.y
#     (roll, pitch, yaw) = euler_from_quaternion(msg.pose.pose.orientation)
#     rospy.loginfo("X: " + x + ", Y: " + y + ", Yaw: " + yaw)


def getPoseFromIPS(args):
    pose_msg = PoseStamped()
    pose_msg = args

    global x
    global y
    global yaw

    x = pose_msg.pose.position.x
    y = pose_msg.pose.position.y
    explicit_quat = [pose_msg.pose.orientation.x, pose_msg.pose.orientation.y,
                     pose_msg.pose.orientation.z, pose_msg.pose.orientation.w]

    (roll, pitch, yaw) = tf.transformations.euler_from_quaternion(explicit_quat)
    # rospy.loginfo("X: " + str(x) + ", Y: " + str(y) + ", Yaw: " + str(yaw))


# Callback function for the Position topic (SIMULATION)
#
# Receives gazebo_msgs ModelState message
def pose_callback(msg, args):
    # This function is called when a new position message is received

    # You'll probably need to check which pose in gazebo represents the robot and not some
    # other (static) object
    # for i in range(len(msg.pose)):
    #    print("Pose {}: {},{},{}".format(i, msg.pose[i].position.x,
    #                                     msg.pose[i].position.y, msg.pose[i].position.z))
    rospy.loginfo(str(msg))
    # republish pose for rviz
    publisher = args
    curpose = PoseStamped()
    curpose.pose = msg.pose[1]
    curpose.header.frame_id = "/map"
    # rospy.loginfo("X: " + str(msg.pose[1].position.x))
    # curpose.header.frame_id = "/base_link"
    getPoseFromIPS(curpose)
    publisher.publish(curpose)


# # Callback function for the Position topic (LIVE)
# # receives ips_msg ?????
# def pose_callback( msg, args ):
# 	# This function is called when a new position message is received
#   publisher = args[0]
# 	if msg.tag_id != TAGID:
#         return
#
#   curpose = PoseStamped()
#
# 	curpose.pose.position.x =  msg.X
# 	curpose.pose.position.y =  msg.Y
# 	curpose.pose.orientation = msg.Yaw
# 	curpose.header.frame_id = "/map"
#   global x
#   global y
#   global yaw
#   x = curpose.pose.position.x
#   y = curpose.pose.position.y
#   yaw = curpose.pose.orientation
# 	publisher.publish(curpose)

# Callback function for odometry reading

# Callback function for the map
def map_callback(msg, args):
    # This function is called when a new map is received
    # you probably want to save the map into a form which is easy to work with
    pass


def main():

    # initialize the ROS model
    rospy.init_node('turtlebot', anonymous=True)

    # initialize a publisher for poses
    pose_pub = rospy.Publisher('/pose', PoseStamped, queue_size=1)

    # initialize a publisher for the velocity message
    pub = rospy.Publisher('/cmd_vel_mux/input/teleop', Twist, queue_size=1)

    # initialize a subscriber to receive the estimated pose and the map
    rospy.Subscriber("/gazebo/model_states", ModelStates,
                     pose_callback, pose_pub)
    rospy.Subscriber("/map", OccupancyGrid, map_callback, ())

    curvePub = CurvePublisher()

    rate = rospy.Rate(20)  # hz

    # while ROS is still running
    while not rospy.is_shutdown():
        curvePub.publish(1)
        curvePub.publish(2)
        curvePub.publish(4)

        msg = Twist()

        # movement forward (X-axis only)
        msg.linear.x = 0.1
        msg.linear.y = 0
        msg.linear.z = 0

        # and angular rotation
        msg.angular.x = 0
        msg.angular.y = 0
        msg.angular.z = 0.3

        pub.publish(msg)
        rate.sleep()


if __name__ == '__main__':
    try:
        sys.exit(main())
    except rospy.ROSInterruptException:
        pass
